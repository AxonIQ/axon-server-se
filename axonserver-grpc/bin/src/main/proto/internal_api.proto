syntax = "proto3";
package io.axoniq.axonserver.grpc.internal;
import "common.proto";
import "command.proto";
import "query.proto";
import "event.proto";
import "control.proto";
option java_multiple_files = true;

service MessagingClusterService {
    // Creates a stream between 2 nodes in the cluser
    // calling side is service provider to called side
    rpc OpenStream( stream ConnectorCommand ) returns (stream ConnectorResponse) {}

    // Node sends a request to join an existing cluster
    // Input is the information on the joining node
    // Response is a list of nodes already in the cluster
    rpc Join( NodeInfo ) returns (stream NodeInfo) {}


}

message ConnectorCommand {
    oneof request {
        NodeInfo connect = 1;
        InternalCommandSubscription subscribe_command = 2;
        InternalCommandSubscription unsubscribe_command = 3;
        io.axoniq.axonserver.grpc.command.CommandResponse command_response = 4;
        InternalQuerySubscription subscribe_query = 5;
        InternalQuerySubscription unsubscribe_query = 6;
        io.axoniq.axonserver.grpc.query.QueryResponse query_response = 7;
        InternalFlowControl flow_control = 8;
        NodeMetrics metrics = 11;
        QueryComplete query_complete = 12;
        ClientStatus client_status = 14;
        ClientEventProcessorStatus client_event_processor_status=15;
        ClientEventProcessor start_client_event_processor = 16;
        ClientEventProcessor pause_client_event_processor = 17;
        io.axoniq.axonserver.grpc.query.SubscriptionQueryResponse subscription_query_response = 26;
        ClientEventProcessorSegment release_segment = 32;
        ClientEventProcessor request_processor_status = 35;
        CommandHandlerStatus command_handler_status = 36;
        QueryHandlerStatus query_handler_status = 37;
    }
}

message ClientStatus {
    string client_name = 1;
    string component_name = 2;
    string context = 3;
    bool connected = 4;
}

message CommandHandlerStatus {
    string context = 1;
    string client_name = 2;
    bool connected = 3;
}

message QueryHandlerStatus {
    string context = 1;
    string client_name = 2;
    bool connected = 3;
}

message InternalCommandSubscription {
    io.axoniq.axonserver.grpc.command.CommandSubscription command = 1;
    string context = 2;
}

message InternalQuerySubscription {
    io.axoniq.axonserver.grpc.query.QuerySubscription query = 1;
    string context = 2;
}

message ConnectorResponse {
    oneof response {
        Confirmation confirmation = 1;
        io.axoniq.axonserver.grpc.command.Command command = 2;
        ConnectResponse connect_response = 3;
        io.axoniq.axonserver.grpc.query.QueryRequest query = 4;
        ClientSubscriptionQueryRequest subscription_query_request = 26;
    }
}

message ClientSubscriptionQueryRequest {
    string client = 1;
    string context = 2;
    io.axoniq.axonserver.grpc.query.SubscriptionQueryRequest subscription_query_request = 3;
}

message ConnectResponse {
}


message QueryComplete {
    string message_id = 1;
    string client = 2;
}

message NodeInfo {
    string node_name = 1;
    string host_name = 2;
    string internal_host_name = 3;
    int32 grpc_port = 4;
    int32 grpc_internal_port = 5;
    int32 http_port = 6;
    int64 active_since = 7;
    int32 version = 8;
    repeated ContextRole contexts = 9;
}

message ContextRole {
    string name = 1;
    bool non_voting = 2;
}

message InternalFlowControl {
    string node_name = 1;
    Group group = 2;
    int64 permits = 3;
}

enum Group {
    COMMAND = 0;
    QUERY = 1;
}

message Metrics {
    int32 request_count = 1;
    int64 interval = 2;
}

message ClientEventProcessorStatus {
    string client = 1;
    io.axoniq.axonserver.grpc.control.EventProcessorInfo event_processor_info = 2;
    string context = 3;
}

message ClientEventProcessor {
    string client = 1;
    string processor_name = 2;
    string context = 3;
}

message ClientEventProcessorSegment {
    string client = 1;
    string processor_name = 2;
    string context = 3;
    int32 segment_identifier = 4;
}

message NodeMetrics {
    string node = 1;
    repeated Metric metrics = 2;
}

message Metric {
    string name = 1;
    int64 size = 2;
    double median = 3;
    double percentile75 = 4;
    double percentile95 = 5;
    double percentile98 = 6;
    double percentile99 = 7;
    double percentile999 = 8;
    int64 max = 9;
    int64 min = 10;
    double mean = 11;

    repeated int64 values = 12;
}

message TransactionWithToken {
    int64 token = 1;
    int32 version = 2;
    repeated io.axoniq.axonserver.grpc.event.Event events = 3;
    int64 index = 4;
}

/*
* Sent to members of config cluster to update context
*/
message Context {
    string name = 1;
    repeated ContextMember members = 2;
}

message ContextMember {
    string node_id  = 1;
    string host = 2;
    int32 port = 3;
    State state = 4;
}

message Application {
    string name = 1;
    string description = 2;
    string token_prefix = 3;
    string token = 4;
    repeated ApplicationContextRole roles_per_context = 5;
}

message ApplicationContextRole {
    string context = 1;
    repeated string roles = 2;
}

message Applications {
    repeated Application applications = 1;
}

message User {
    string name = 1;
    string password = 2;
    repeated string roles = 3;
}

message Users {
    repeated User users = 1;
}

message ContextNames {
    repeated string contexts = 1;
}

enum State {
    VOTING = 0;
    LEADER = 1;
    NON_VOTING = 2;
    INITIALIZING = 3;
}

message ContextConfiguration {
    string context = 1;
    repeated NodeInfo nodes = 2;
}


message ContextName {
    string context = 1;
}

message NodeContext {
    string node = 1;
    string context = 2;
}
message LoadBalanceStrategy {
    string name = 1;
    string factoryBean = 2;
    string label = 3;
}

message ProcessorLBStrategy {
    string component = 1;
    string processor = 2;
    string context = 3;
    string strategy = 4;
}

message ContextApplication {
    string context = 1;
    Application application = 2;
}

message ContextUser {
    string context = 1;
    User user = 2;
}

message ContextLoadBalanceStrategy {
    string context = 1;
    LoadBalanceStrategy loadBalanceStrategy = 2;
}

message ContextProcessorLBStrategy {
    string context = 1;
    ProcessorLBStrategy processorLBStrategy = 2;
}

/**
 * Services on config leader
 */
service RaftConfigService {
    rpc InitCluster(ContextNames) returns (Confirmation) {}

    rpc JoinCluster(NodeInfo) returns (Confirmation) {}

    rpc CreateContext(Context) returns (Confirmation) {}

    rpc AddNodeToContext(NodeContext) returns (Confirmation) {}

    rpc DeleteNodeFromContext(NodeContext) returns (Confirmation) {}

    rpc DeleteContext(ContextName) returns (Confirmation) {}

    rpc UpdateApplication(Application) returns (Confirmation) {}

    rpc DeleteApplication(Application) returns (Confirmation) {}

    rpc UpdateUser(User) returns (Confirmation) {}

    rpc DeleteUser(User) returns (Confirmation) {}

    rpc UpdateLoadBalanceStrategy(LoadBalanceStrategy) returns (Confirmation) {}

    rpc DeleteLoadBalanceStrategy(LoadBalanceStrategy) returns (Confirmation) {}

    rpc UpdateProcessorLBStrategy(ProcessorLBStrategy) returns (Confirmation) {}

    rpc DeleteProcessorLBStrategy(ProcessorLBStrategy) returns (Confirmation) {}
}

/**
 * Services on context leader/member callled from config leader
 */
service RaftGroupService {

    rpc InitContext(Context) returns (Confirmation) {}

    rpc AddServer(Context) returns (Confirmation) {}

    rpc RemoveServer(Context) returns (Confirmation) {}

    rpc MergeAppAuthorization(ContextApplication) returns (Confirmation) {}

    rpc DeleteAppAuthorization(ContextApplication) returns (Confirmation) {}

    rpc MergeUserAuthorization(ContextUser) returns (Confirmation) {}

    rpc DeleteUserAuthorization(ContextUser) returns (Confirmation) {}

    rpc MergeLoadBalanceStrategy(ContextLoadBalanceStrategy) returns (Confirmation) {}

    rpc DeleteLoadBalanceStrategy(ContextLoadBalanceStrategy) returns (Confirmation) {}

    rpc MergeProcessorLBStrategy(ContextProcessorLBStrategy) returns (Confirmation) {}

    rpc DeleteProcessorLBStrategy(ContextProcessorLBStrategy) returns (Confirmation) {}

    rpc GetStatus(Context) returns (stream Context) {}
}

