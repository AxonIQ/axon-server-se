syntax = "proto3";
package io.axoniq.axonserver.grpc.cluster;

option java_multiple_files = true;

service LeaderElectionService {
    rpc RequestVote( RequestVoteRequest ) returns (RequestVoteResponse) {}
}

service LogReplicationService {
    rpc AppendEntries (stream AppendEntriesRequest) returns (stream AppendEntriesResponse) {}

    rpc InstallSnapshot( stream InstallSnapshotRequest) returns (stream InstallSnapshotResponse) {}
}



message RequestVoteRequest {
    string groupId = 1;
    uint64 term = 2;
    string candidateId = 3;
    uint64 lastLogTerm = 4;
    uint64 lastLogIndex = 5;
}

message RequestVoteResponse {
    string groupId = 1;
    uint64 term = 2; // term for candidate to update itself
    bool voteGranted = 3;
    // shouldShutdown?
}

message AppendEntriesRequest {
    string groupId = 1;
    uint64 term = 2; // Leader's term
    string leaderId = 3;
    uint64 prevLogTerm = 4;
    uint64 prevLogIndex = 5;
    repeated Entry entries = 6;
    uint64 commitIndex = 7;
}

message Entry {
    uint64 term = 1; // Term where entry created
    uint64 index = 2;
    oneof data {
        SerializedObject serializedObject = 3;
        Config newConfiguration = 4;
    }
}

message AppendEntriesResponse {
    string groupId = 1;
    uint64 term = 2;
    oneof result {
        AppendEntrySuccess success = 3;
        AppendEntryFailure failure = 4;
    }

}

message AppendEntrySuccess {
    uint64 lastLogIndex = 1;
}

message AppendEntryFailure {
    uint64 lastAppliedIndex = 1;
    uint64 lastAppliedEventSequence = 2; // only relevant for storage groups
}


message InstallSnapshotRequest {
    string groupId = 1;
    uint64 term = 2; // Leader's term
    string leaderId = 3;
    uint64 lastIncludedTerm= 4;
    uint64 lastIncludedIndex = 5;
    Config lastConfig = 6;
    uint32 offset = 7; // starts from 0
    bool done = 8;
    repeated SerializedObject data = 9;
}

message SerializedObject {
    string type = 1;
    bytes data = 2;

}

message InstallSnapshotResponse {
    string groupId = 1;
    uint64 term = 2;
    oneof result {
        InstallSnapshotSuccess success = 3;
        InstallSnapshotFailure failure = 4;
    }
}

message InstallSnapshotSuccess {
    uint32 lastReceivedOffset = 3;
}

message InstallSnapshotFailure {
}

message Config {
    repeated Node nodes = 1;
}

message Node {
    string nodeId = 1;
    string host = 2;
    uint32 port = 3;
}
