syntax = "proto3";
package io.axoniq.axonserver.grpc.cluster;

option java_multiple_files = true;

service LeaderElectionService {
    rpc RequestVote( RequestVoteRequest ) returns (RequestVoteResponse) {}
}

service LogReplicationService {
    rpc AppendEntries (stream AppendEntriesRequest) returns (stream AppendEntriesResponse) {}

    rpc InstallSnapshot( stream InstallSnapshotRequest) returns (stream InstallSnapshotResponse) {}
}

message ResponseHeader {
    string requestId = 1;
    string responseId = 2;
    string nodeId = 3;
}

message RequestVoteRequest {
    string requestId = 1;
    string groupId = 2;
    uint64 term = 3;
    string candidateId = 4;
    uint64 lastLogTerm = 5;
    uint64 lastLogIndex = 6;
}

message RequestVoteResponse {
    ResponseHeader responseHeader = 1;
    string groupId = 2;
    uint64 term = 3; // term for candidate to update itself
    bool voteGranted = 4;
    bool goAway = 5; // returned by leader on request vote from unknown node
}

message AppendEntriesRequest {
    string requestId = 1;
    string groupId = 2;
    uint64 term = 3; // Leader's term
    string leaderId = 4;
    uint64 prevLogTerm = 5;
    uint64 prevLogIndex = 6;
    repeated Entry entries = 7;
    uint64 commitIndex = 8;
    string targetId = 9; // The nodeId of the receiver, used to initialize raft group
}

message Entry {
    uint64 term = 1; // Term where entry created
    uint64 index = 2;
    oneof data {
        SerializedObject serializedObject = 3;
        Config newConfiguration = 4;
        LeaderElected leaderElected = 5;
    }
}

message AppendEntriesResponse {
    ResponseHeader responseHeader = 1;
    string groupId = 2;
    uint64 term = 3;
    oneof result {
        AppendEntrySuccess success = 4;
        AppendEntryFailure failure = 5;
    }

}

message AppendEntrySuccess {
    uint64 lastLogIndex = 1;
}

message AppendEntryFailure {
    string cause = 1;
    uint64 lastAppliedIndex = 2;
    sint64 lastAppliedEventSequence = 3; // only relevant for storage groups
}


message InstallSnapshotRequest {
    string requestId = 1;
    string groupId = 2;
    uint64 term = 3; // Leader's term
    string leaderId = 4;
    uint64 lastIncludedTerm= 5;
    uint64 lastIncludedIndex = 6;
    Config lastConfig = 7;
    uint32 offset = 8; // starts from 0
    bool done = 9;
    repeated SerializedObject data = 10;
}

message SerializedObject {
    string type = 1;
    bytes data = 2;

}

message InstallSnapshotResponse {
    ResponseHeader responseHeader = 1;
    string groupId = 2;
    uint64 term = 3;
    oneof result {
        InstallSnapshotSuccess success = 4;
        InstallSnapshotFailure failure = 5;
    }
}

message InstallSnapshotSuccess {
    uint32 lastReceivedOffset = 3;
}

message InstallSnapshotFailure {
    string cause = 1;
}

message Config {
    repeated Node nodes = 1;
}

message LeaderElected {
    string leaderId = 1;
}

message Node {
    // generated unique id for a node
    string nodeId = 1;
    string host = 2;
    uint32 port = 3;
    // cluster node name
    string nodeName = 4;
}

message ConfigChangeResult {
    oneof result {
        NotLeader not_leader= 1;
        ConfigChangeSuccess success = 2;
        ConfigChangeFailure failure = 3;
    }
}

message NotLeader {
    string leaderId = 1;
}

message ConfigChangeSuccess {
}

message ConfigChangeFailure {
    ErrorMessage error = 1;
}

message ErrorMessage {
    string code = 1;
    string message = 2;
}