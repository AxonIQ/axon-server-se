create table application (id bigint generated by default as identity, description varchar(255), hashed_token varchar(255), name varchar(255), primary key (id));
create table application_roles (application_id bigint not null, roles_id bigint not null, primary key (application_id, roles_id));
create table application_role (id bigint generated by default as identity, context varchar(255), end_date timestamp, role varchar(255), primary key (id));
create table cluster_node (name varchar(255) not null, grpc_internal_port integer, grpc_port integer, host_name varchar(255), http_port integer, internal_host_name varchar(255), primary key (name));
create table path_mapping (path varchar(255) not null, role varchar(255), primary key (path));
alter table application add constraint application_uk1 unique (hashed_token);
alter table application add constraint application_uk2 unique (name);
alter table application_roles add constraint application_roles_uk unique (roles_id);
alter table application_roles add constraint application_roles_fk1 foreign key (roles_id) references application_role;
alter table application_roles add constraint application_roles_fk2 foreign key (application_id) references application;
create table application_model_version (application_name varchar(255) not null, version bigint not null, primary key (application_name));

insert into path_mapping( path, role) values ('GET:/v1/events','READ');
insert into path_mapping( path, role) values ('POST:/v1/events', 'WRITE');
insert into path_mapping( path, role) values ('GET:/v1/snapshots', 'READ');
insert into path_mapping( path, role) values ('POST:/v1/snapshots', 'WRITE');
insert into path_mapping( path, role) values ('GET:/v1/applications', 'READ');
insert into path_mapping( path, role) values ('GET:/v1/applications/*', 'READ');
insert into path_mapping( path, role) values ('POST:/v1/applications', 'ADMIN');
insert into path_mapping( path, role) values ('DELETE:/v1/applications/*', 'ADMIN');
insert into path_mapping( path, role) values ('POST:/v1/cluster', 'ADMIN');
insert into path_mapping( path, role) values ('DELETE:/v1/cluster/*', 'ADMIN');
insert into path_mapping( path, role) values ('GET:/v1/backup/*', 'ADMIN');
insert into path_mapping( path, role) values ('GET:/v1/stop', 'ADMIN');

insert into path_mapping( path, role) values ('GET:/v1/cluster', 'ADMIN');
insert into path_mapping( path, role) values ('GET:/v1/cluster/eventStore', 'ADMIN');
insert into path_mapping( path, role) values ('GET:/v1/instructions', 'ADMIN');
insert into path_mapping( path, role) values ('GET:/v1/commands', 'ADMIN');
insert into path_mapping( path, role) values ('POST:/v1/commands', 'ADMIN');
insert into path_mapping( path, role) values ('GET:/v1/queries', 'ADMIN');

insert into path_mapping( path, role) values ('GET:/configprops', 'ADMIN');
insert into path_mapping( path, role) values ('GET:/configprops.json', 'ADMIN');
insert into path_mapping( path, role) values ('GET:/actuator', 'ADMIN');
insert into path_mapping( path, role) values ('GET:/actuator.json', 'ADMIN');
insert into path_mapping( path, role) values ('GET:/metrics', 'ADMIN');
insert into path_mapping( path, role) values ('GET:/metrics.json', 'ADMIN');
insert into path_mapping( path, role) values ('GET:/loggers*', 'ADMIN');
insert into path_mapping( path, role) values ('POST:/loggers*', 'ADMIN');
insert into path_mapping( path, role) values ('GET:/autoconfig', 'ADMIN');
insert into path_mapping( path, role) values ('GET:/autoconfig.json', 'ADMIN');
insert into path_mapping( path, role) values ('GET:/heapdump', 'ADMIN');
insert into path_mapping( path, role) values ('GET:/heapdump.json', 'ADMIN');
insert into path_mapping( path, role) values ('GET:/beans', 'ADMIN');
insert into path_mapping( path, role) values ('GET:/beans.json', 'ADMIN');
insert into path_mapping( path, role) values ('GET:/webjars/*', 'ADMIN');

insert into path_mapping( path, role) values ('io.axoniq.axonserver.grpc.event.EventStore/ListEvents', 'READ');
insert into path_mapping( path, role) values ('io.axoniq.axonserver.grpc.event.EventStore/AppendEvent', 'WRITE');
insert into path_mapping( path, role) values ('io.axoniq.axonserver.grpc.event.EventStore/AppendSnapshot', 'WRITE');
insert into path_mapping( path, role) values ('io.axoniq.axonserver.grpc.event.EventStore/ListAggregateEvents', 'READ');
insert into path_mapping( path, role) values ('io.axoniq.axonserver.grpc.event.EventStore/ReadHighestSequenceNr', 'READ');

insert into path_mapping( path, role) values ('io.axoniq.axonserver.grpc.command.CommandService/OpenStream', 'WRITE');
insert into path_mapping( path, role) values ('io.axoniq.axonserver.grpc.command.CommandService/Dispatch', 'WRITE');

insert into path_mapping( path, role) values ('io.axoniq.axonserver.grpc.query.QueryService/OpenStream', 'READ');
insert into path_mapping( path, role) values ('io.axoniq.axonserver.grpc.query.QueryService/Query', 'READ');

insert into path_mapping( path, role) values ('io.axoniq.axonhub.grpc.InstructionService/OpenStream', 'READ');

insert into path_mapping( path, role) values ('io.axoniq.axonserver.grpc.control.PlatformService/GetPlatformServer', 'READ');
insert into path_mapping( path, role) values ('io.axoniq.axonserver.grpc.control.PlatformService/OpenStream', 'READ');