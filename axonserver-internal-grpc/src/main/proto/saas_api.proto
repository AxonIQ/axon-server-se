syntax = "proto3";
package io.axoniq.axonserver.grpc.internal.saas;
import "internal_api.proto";
import "event.proto";
import "control.proto";
import "common.proto";

option java_multiple_files = true;

service SaasAdminService {

    rpc GetNodes (EmptyRequest) returns (stream NodeInfo) {
    }

    rpc GetContexts (EmptyRequest) returns (stream Context) {
    }

    rpc GetApplications (EmptyRequest) returns (stream Application) {
    }

    rpc CreateContext (Context) returns (InstructionAck) {
    }

    rpc AddNodeToContext (NodeContext) returns (InstructionAck) {
    }

    rpc DeleteNodeFromContext (NodeContext) returns (InstructionAck) {
    }

    rpc DeleteContext (ContextName) returns (InstructionAck) {
    }

    rpc CreateApplication (Application) returns (Application) {
    }

    rpc DeleteApplication (Application) returns (InstructionAck) {
    }

    rpc RefreshToken (Application) returns (Application) {
    }
}

service SaasUserService {
    rpc GetOverview (EmptyRequest) returns (ContextOverview) {

    }

    // Performs a query on the event store, returns a stream of results. Input is a stream to allow flow control from the
    // client
    rpc QueryEvents (stream io.axoniq.axonserver.grpc.event.QueryEventsRequest) returns (stream io.axoniq.axonserver.grpc.event.QueryEventsResponse) {
    }

}

message ContextOverview {
    string context = 1;

    repeated string nodes = 2;

    repeated ClientApplication applications = 3;
}

message ClientApplication {
    string name = 1;

    repeated Client clients = 2;

    repeated string commands = 3;

    repeated QueryInfo queries = 4;
}

message Client {
    string name = 1;
    string node = 2;
    repeated io.axoniq.axonserver.grpc.control.EventProcessorInfo processors = 3;
}

message QueryInfo {
    string request = 1;
    repeated string response_types = 2;
}