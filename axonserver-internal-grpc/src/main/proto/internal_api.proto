syntax = "proto3";
package io.axoniq.axonserver.grpc.internal;
import "common.proto";
import "command.proto";
import "query.proto";
import "control.proto";
import "raft.proto";
option java_multiple_files = true;

service MessagingClusterService {
    // Creates a stream between 2 nodes in the cluser
    // calling side is service provider to called side
    rpc OpenStream (stream ConnectorCommand) returns (stream ConnectorResponse) {
    }
}

/**
 * Services on config leader
 */
service RaftConfigService {
    rpc InitCluster (ContextNames) returns (InstructionAck) {
    }

    rpc JoinCluster (NodeInfo) returns (InstructionAck) {
    }

    rpc DeleteNode (NodeName) returns (InstructionAck) {
    }

    rpc CreateContext (Context) returns (InstructionAck) {
    }

    rpc AddNodeToContext (NodeContext) returns (InstructionAck) {
    }

    rpc DeleteNodeFromContext (NodeContext) returns (InstructionAck) {
    }

    rpc DeleteContext (ContextName) returns (InstructionAck) {
    }

    rpc UpdateApplication (Application) returns (Application) {
    }

    rpc DeleteApplication (Application) returns (InstructionAck) {
    }

    rpc RefreshToken (Application) returns (Application) {
    }

    rpc UpdateUser (User) returns (InstructionAck) {
    }

    rpc DeleteUser (User) returns (InstructionAck) {
    }

    rpc UpdateLoadBalanceStrategy (LoadBalanceStrategy) returns (InstructionAck) {
    }

    rpc DeleteLoadBalanceStrategy (LoadBalanceStrategy) returns (InstructionAck) {
    }

    rpc UpdateProcessorLBStrategy (ProcessorLBStrategy) returns (InstructionAck) {
    }

    rpc DeleteProcessorLBStrategy (ProcessorLBStrategy) returns (InstructionAck) {
    }
}

/**
 * Services on context leader/member callled from config leader
 */
service RaftGroupService {

    rpc InitContext (Context) returns (ContextConfiguration) {
    }

    rpc DeleteContext (DeleteContextRequest) returns (InstructionAck) {
    }

    rpc AddServer (Context) returns (ContextUpdateConfirmation) {
    }

    rpc RemoveServer (Context) returns (ContextUpdateConfirmation) {
    }

    rpc MergeAppAuthorization (ContextApplication) returns (InstructionAck) {
    }

    rpc DeleteAppAuthorization (ContextApplication) returns (InstructionAck) {
    }

    rpc MergeUserAuthorization (ContextUser) returns (InstructionAck) {
    }

    rpc DeleteUserAuthorization (ContextUser) returns (InstructionAck) {
    }

    rpc MergeLoadBalanceStrategy (ContextLoadBalanceStrategy) returns (InstructionAck) {
    }

    rpc DeleteLoadBalanceStrategy (ContextLoadBalanceStrategy) returns (InstructionAck) {
    }

    rpc MergeProcessorLBStrategy (ContextProcessorLBStrategy) returns (InstructionAck) {
    }

    rpc DeleteProcessorLBStrategy (ContextProcessorLBStrategy) returns (InstructionAck) {
    }

    rpc GetStatus (Context) returns (stream Context) {
    }

    rpc AppendEntry (ContextEntry) returns (InstructionAck) {
    }

    rpc Configuration (ContextName) returns (ContextConfiguration) {
    }

    rpc TransferLeadership (ContextName) returns (InstructionAck) {
    }

    // Notify a node that a node will be deleted from a context.
    rpc PreDeleteNodeFromContext (NodeContext) returns (Confirmation) {
    }
}

message NodeContext {
    string node_name = 1;
    string context = 2;
    io.axoniq.axonserver.grpc.cluster.Role role = 3;
}

message ConnectorCommand {
    oneof request {
        ConnectRequest connect = 1;
        InternalCommandSubscription subscribe_command = 2;
        InternalCommandSubscription unsubscribe_command = 3;
        ForwardedCommandResponse command_response = 4;
        InternalQuerySubscription subscribe_query = 5;
        InternalQuerySubscription unsubscribe_query = 6;
        ForwardedQueryResponse query_response = 7;
        InternalFlowControl flow_control = 8;
        DeleteNode delete_node = 9;
        NodeMetrics metrics = 11;
        QueryComplete query_complete = 12;
        ClientStatus client_status = 14;
        ClientEventProcessorStatus client_event_processor_status = 15;
        ClientEventProcessor start_client_event_processor = 16;
        ClientEventProcessor pause_client_event_processor = 17;
        ContextUpdate context = 25;
        io.axoniq.axonserver.grpc.query.SubscriptionQueryResponse subscription_query_response = 26;
        ClientEventProcessorSegment release_segment = 32;
        ClientEventProcessor request_processor_status = 35;
        CommandHandlerStatus command_handler_status = 36;
        QueryHandlerStatus query_handler_status = 37;
        ClientEventProcessorSegment split_segment = 38;
        ClientEventProcessorSegment merge_segment = 39;
    }
}

/*
    A representation of a QueryResponse that is (to be) forwarded between AxonServer nodes. It passes additional
    information which is not directly provided by the responding application components itself.

    Developer note:
    all fields defined in QueryResponse must be represented here with the same ID, name and type. Any field IDs used
    in this message in addition to QueryResponse should be marked as reserved in QueryResponse, to avoid clashes.
*/
message ForwardedQueryResponse {

    /* The unique identifier of this message */
    string message_identifier = 1;

    /* The error code, if an error occurred while processing */
    string error_code = 2;

    /* A more detailed description of the error, if one occurred */
    ErrorMessage error_message = 3;

    /* The payload of the response message */
    SerializedObject payload = 4;

    /* Any meta data elements provided in the Query Response message */
    map<string, MetaDataValue> meta_data = 5;

    /* Instructions for AxonServer when routing this message */
    repeated ProcessingInstruction processing_instructions = 6;

    /* The identifier of the Query to which this is a response */
    string request_identifier = 7;

    /*
        The ClientID of the component that provided the response. For compatibility with nodes using the legacy (< 4.1) API,
        check for ProcessingInstruction with key 5 for a Client ID if this field contains no information
    */
    string respondingClientId = 15;
}

message ForwardedCommandResponse {
    string request_identifier = 1;
    bytes response = 2;
}

message DeleteNode {
    string node_name = 1;
    int64 generation = 2;
}

message ClientStatus {
    string client_name = 1;
    string component_name = 2;
    string context = 3;
    bool connected = 4;
}

message CommandHandlerStatus {
    string context = 1;
    string client_name = 2;
    bool connected = 3;
}

message QueryHandlerStatus {
    string context = 1;
    string client_name = 2;
    bool connected = 3;
}

message DBInstanceStatus {
    string hub_node = 1;
    string context = 2;
    io.axoniq.axonserver.grpc.control.NodeInfo db_instance = 3;
    bool connected = 4;
}

message InternalCommandSubscription {
    io.axoniq.axonserver.grpc.command.CommandSubscription command = 1;
    string context = 2;
}

message InternalQuerySubscription {
    io.axoniq.axonserver.grpc.query.QuerySubscription query = 1;
    string context = 2;
}

message ConnectRequest {
    NodeInfo nodeInfo = 1;
    bool admin = 2;
}

message ConnectorResponse {
    oneof response {
        InstructionAck confirmation = 1;
        ForwardedCommand command = 2;
        ConnectResponse connect_response = 3;
        ForwardedQuery query = 4;
        ClientSubscriptionQueryRequest subscription_query_request = 26;
    }
}

message ForwardedQuery {
    string client = 1;
    string context = 2;
    bytes query = 3;
}

message ForwardedCommand {
    string client = 1;
    string context = 2;
    string message_id = 3;
    bytes command = 4;
}

message ClientSubscriptionQueryRequest {
    string client = 1;
    string context = 2;
    io.axoniq.axonserver.grpc.query.SubscriptionQueryRequest subscription_query_request = 3;
}

message ConnectResponse {
    bool deleted = 6;
}

message ModelVersion {
    string name = 1;
    int64 value = 2;
}

message ContextRole {
    string name = 1;
    bool messaging = 2;
    bool storage = 3;
    string node_label = 4;
}

message NodeRole {
    string name = 1;
    bool messaging = 2;
    bool storage = 3;
    string node_label = 4;
}

message ContextUpdate {
    string name = 1;
    repeated NodeRole nodes = 3;
    ContextAction action = 4;
    int64 generation = 5;
}

enum ContextAction {
    MERGE_CONTEXT = 0;
    DELETE_CONTEXT = 1;
    NODES_UPDATED = 2;
}

message QueryComplete {
    string message_id = 1;
    string client = 2;
}

message NodeInfo {
    string node_name = 1;
    string host_name = 2;
    string internal_host_name = 3;
    int32 grpc_port = 4;
    int32 grpc_internal_port = 5;
    int32 http_port = 6;
    int64 active_since = 7;
    int32 version = 8;
    repeated ContextRole contexts = 9;
    map<string, string> tags = 10;
}

message InternalFlowControl {
    string node_name = 1;
    Group group = 2;
    int64 permits = 3;
}

enum Group {
    COMMAND = 0;
    QUERY = 1;
}


message ContextEntry {
    string context = 1;
    string entry_name = 2;
    bytes entry = 3;
}

message ProcessorsLBStrategy {
    int64 version = 1;
    repeated ProcessorLBStrategy processor = 2;
}

message Metrics {
    int32 request_count = 1;
    int64 interval = 2;
}

message ClientEventProcessorStatus {
    string client = 1;
    io.axoniq.axonserver.grpc.control.EventProcessorInfo event_processor_info = 2;
    string context = 3;
}

message ClientEventProcessor {
    string client = 1;
    string processor_name = 2;
    string context = 3;
}

message ClientEventProcessorSegment {
    string client = 1;
    string processor_name = 2;
    string context = 3;
    int32 segment_identifier = 4;
}

message NodeMetrics {
    string node = 1;
    repeated Metric metrics = 2;
}

message Metric {
    string name = 1;
    int64 size = 2;
    double median = 3;
    double percentile75 = 4;
    double percentile95 = 5;
    double percentile98 = 6;
    double percentile99 = 7;
    double percentile999 = 8;
    int64 max = 9;
    int64 min = 10;
    double mean = 11;

    repeated int64 values = 12;
}

message SynchronizationReplicaOutbound {
    oneof request {
        StartSynchronization start = 1;
        Permits permits = 2;
        TransactionConfirmation confirmation = 3;
    }
    // Reserved for backwards compatibility - safepoint_confirmation
    reserved 4;
}

message SynchronizationReplicaInbound {
    oneof request {
        TransactionWithToken event = 1;
        TransactionWithToken snapshot = 2;
    }
    // Reserved for backwards compatibility - safepoint
    reserved 3;
}
message StartSynchronization {
    int64 event_token = 1;
    int64 snaphshot_token = 2;
    string context = 3;
    int64 permits = 4;
    string node_name = 5;
}

message Permits {
    int64 permits = 1;
}

message TransactionConfirmation {
    int64 token = 1;
    string type = 2;
}

message TransactionWithToken {
    int64 token = 1;
    int32 version = 2;
    repeated bytes events = 3;
}

/*
* Sent to members of config cluster to update context
*/
message Context {
    string name = 1;
    repeated ContextMember members = 2;
}

message ContextUpdateConfirmation {
    bool success = 1;
    string message = 2;
    repeated ContextMember members = 3;
    bool pending = 4;
}

message ContextMember {
    string node_id = 1;
    string host = 2;
    int32 port = 3;
    State state = 4;
    string node_name = 5;
    io.axoniq.axonserver.grpc.cluster.Role role = 6;
}

message Application {
    string name = 1;
    string description = 2;
    string token_prefix = 3;
    string token = 4;
    repeated ApplicationContextRole roles_per_context = 5;
}

message ApplicationContextRole {
    string context = 1;
    repeated string roles = 2;
}

message Applications {
    repeated Application applications = 1;
}

message User {
    string name = 1;
    string password = 2;
    repeated UserContextRole roles = 3;
}

message UserContextRole {
    string context = 1;
    string role = 2;
}

message Users {
    repeated User users = 1;
}

message ContextNames {
    repeated string contexts = 1;
}

enum State {
    VOTING = 0;
    LEADER = 1;
    NON_VOTING = 2;
    INITIALIZING = 3;
}

message ContextConfiguration {
    string context = 1;
    repeated NodeInfoWithLabel nodes = 2;
    bool pending = 3;
}

message NodeInfoWithLabel {
    NodeInfo node = 1;
    string label = 2;
    io.axoniq.axonserver.grpc.cluster.Role role = 3;
}

message ContextName {
    string context = 1;
}

message DeleteContextRequest {
    string context = 1;
    bool preserve_eventstore = 2;
}


message NodeName {
    string node = 1;
}

message LoadBalanceStrategy {
    string name = 1;
    string factoryBean = 2;
    string label = 3;
}

message ProcessorLBStrategy {
    //    string component = 1; this field is obsoleted, the line is commented in order not to use this index for other purposes
    string processor = 2;
    string context = 3;
    string strategy = 4;
}

message ContextApplication {
    string context = 1;
    string name = 2;
    string token_prefix = 3;
    string hashed_token = 4;
    repeated string roles = 5;
}

message ContextUser {
    string context = 1;
    User user = 2;
}

message ContextLoadBalanceStrategy {
    string context = 1;
    LoadBalanceStrategy loadBalanceStrategy = 2;
}

message ContextProcessorLBStrategy {
    string context = 1;
    ProcessorLBStrategy processorLBStrategy = 2;
}

message MetaData {
    map<string, MetaDataValue> meta_data = 1;
}
